private void CreateBoard(float xOffset, float yOffset)
        {
            Sprite[] previousLeft = new Sprite[ySize];
            Sprite previousBelow = null;
            tiles = new GameObject[xSize, ySize]; // 9

            float startX = transform.position.x; // 10
            float startY = transform.position.y;

            for (int x = 0; x < xSize; x++)
            { // 11
                for (int y = 0; y < ySize; y++)
                {
                    GameObject newTile = Instantiate(tile, new Vector3(startX + (xOffset * x), startY + (yOffset * y), 0), tile.transform.rotation);
                    tiles[x, y] = newTile;
                    newTile.transform.parent = transform;
                    List<Sprite> possibleCharacters = new List<Sprite>();
                    possibleCharacters.AddRange(characters);
                    possibleCharacters.Remove(previousLeft[y]);
                    possibleCharacters.Remove(previousBelow);
                    Sprite newSprite = possibleCharacters[Random.Range(0, possibleCharacters.Count)];
                    newTile.GetComponent<SpriteRenderer>().sprite = newSprite;
                    previousLeft[y] = newSprite;
                    previousBelow = newSprite;
                }
            }
        }

        public IEnumerator FindNullTiles()
        {
            for (int x = 0; x < xSize; x++)
            {
                for (int y = 0; y < ySize; y++)
                {
                    if (tiles[x, y].GetComponent<SpriteRenderer>().sprite == null)
                    {
                        yield return StartCoroutine(ShiftTilesDown(x, y));
                        break;
                    }
                }
            }
            for (int x = 0; x < xSize; x++)
            {
                for (int y = 0; y < ySize; y++)
                {
                    tiles[x, y].GetComponent<Tile>().ClearAllMatches();
                }
            }
        }

        private IEnumerator ShiftTilesDown(int x, int yStart, float shiftDelay = .03f)
        {
            IsShifting = true;
            List<SpriteRenderer> renders = new List<SpriteRenderer>();
            int nullCount = 0;
            for (int y = yStart; y < ySize; y++)
            {
                SpriteRenderer render = tiles[x, y].GetComponent<SpriteRenderer>();
                if (render.sprite == null)
                {
                    nullCount++;
                }
                renders.Add(render);
            }
            for (int i = 0; i < nullCount; i++)
            {
                GUIManager.instance.Score += 50;
                yield return new WaitForSeconds(shiftDelay);
                for (int k = 0; k < renders.Count - 1; k++)
                {
                    renders[k].sprite = renders[k + 1].sprite;
                    renders[k + 1].sprite = GetNewSprite(x, ySize - 1);
                }
            }
            IsShifting = false;
        }

        private Sprite GetNewSprite(int x, int y)
        {
            List<Sprite> possibleCharacters = new List<Sprite>();
            possibleCharacters.AddRange(characters);

            if (x > 0)
            {
                possibleCharacters.Remove(tiles[x - 1, y].GetComponent<SpriteRenderer>().sprite);
            }
            if (x < xSize - 1)
            {
                possibleCharacters.Remove(tiles[x + 1, y].GetComponent<SpriteRenderer>().sprite);
            }
            if (y > 0)
            {
                possibleCharacters.Remove(tiles[x, y - 1].GetComponent<SpriteRenderer>().sprite);
            }

            return possibleCharacters[Random.Range(0, possibleCharacters.Count)];
        }
